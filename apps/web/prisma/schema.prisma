// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  username      String         @unique
  name          String?
  phone         String         @unique
  email         String?
  superAdmin    Boolean        @default(false)
  theme         Theme? // Add this relation
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bookmarks     Bookmark[]
  sessions      Session[]
  ratings       ThemeRating[] // Add this relation
  themeComments ThemeComment[]
  Feedback      Feedback[]
  categories    Category[]
  collections   Collection[]
  usernameRedirects UsernameRedirect[]

  @@index([username])
}

model Theme {
  id                String         @id @default(cuid())
  userId            String         @unique
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String? // Theme name for sharing
  isPublic          Boolean        @default(false) // Whether theme can be shared
  primaryColor      String         @default("#8b5cf6")
  accentColor       String         @default("#14b8a6")
  backgroundColor   String         @default("#ffffff")
  textColor         String         @default("#171717")
  fontFamily        String         @default("geist")
  customCss         String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  cardStyle         String         @default("default")
  animation         String         @default("fade")
  borderRadius      String         @default("rounded")
  shadows           Boolean        @default(true)
  glassmorphism     Boolean        @default(false)
  pattern           String?
  backgroundImage   String?
  backgroundBlur    Int            @default(0)
  backgroundOverlay String?
  ratings           ThemeRating[] // Add this relation
  likeCount         Int            @default(0) // Denormalized count for performance
  comments          ThemeComment[]
  searchText        String? // For full-text search
  tags              String[] // For categorization and search

  @@index([isPublic]) // For finding public themes
  @@index([likeCount]) // For sorting by popularity
  @@index([tags])
}

// New model for theme ratings
model ThemeRating {
  id        String   @id @default(cuid())
  themeId   String
  userId    String
  rating    Int      @default(1) // 1 = like
  createdAt DateTime @default(now())
  theme     Theme    @relation(fields: [themeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([themeId, userId]) // One rating per user per theme
  @@index([userId])
  @@index([themeId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String? // Verification code (null after used)
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([code]) // For fast lookups during verification
  @@index([expiresAt]) // For cleanup of expired sessions
}

model ContentType {
  id        String     @id @default(cuid())
  name      String     @unique // 'twitter', 'reddit', etc
  logo      String // URL to logo
  strategy  String // Strategy name for content fetching
  bookmarks Bookmark[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Bookmark {
  id            String      @id @default(cuid())
  title         String
  url           String
  tags          String[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  preview       String?
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  contentTypeId String
  contentType   ContentType @relation(fields: [contentTypeId], references: [id])
  status        String      @default("unread")
  readAt        DateTime?
  categoryId    String?
  category      Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  clickCount    Int         @default(0)
  source        String      @default("web") // Values: "web", "extension", "sms"

  @@index([categoryId])
  @@index([userId])
  @@index([contentTypeId])
  @@index([clickCount])
}

model ThemeComment {
  id        String         @id @default(cuid())
  content   String         @db.Text // Allow longer comments
  themeId   String
  userId    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  theme     Theme          @relation(fields: [themeId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Int            @default(0) // For comment ranking
  parentId  String? // For nested replies
  parent    ThemeComment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   ThemeComment[] @relation("Replies")

  @@index([themeId])
  @@index([userId])
  @@index([createdAt])
  @@index([likes])
  @@index([parentId])
}

model Feedback {
  id          String         @id @default(cuid())
  type        FeedbackType
  title       String
  description String
  status      FeedbackStatus @default(NEW)
  userId      String?
  user        User?          @relation(fields: [userId], references: [id])
  phoneNumber String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([userId])
  @@index([status])
}

model Category {
  id           String      @id @default(cuid())
  name         String
  parentId     String?
  parent       Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children     Category[]  @relation("CategoryHierarchy")
  order        Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookmarks    Bookmark[]
  collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId String?

  @@index([userId])
  @@index([parentId])
  @@index([collectionId])
}

model Collection {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories  Category[]
  viewCount   Int        @default(0)
  shareCount  Int        @default(0)

  @@index([userId])
}

model UsernameRedirect {
  id        String   @id @default(cuid())
  oldUsername String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([oldUsername])
  @@index([userId])
}

enum FeedbackType {
  FEATURE_REQUEST
  BUG_REPORT
  OTHER
}

enum FeedbackStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  DECLINED
}

// Add to existing schema
model Analytics {
  id        String   @id @default(cuid())
  type      String   
  userId    String?
  sessionId String?
  visitorId String?  // Add this field
  path      String?
  metadata  Json?
  timestamp DateTime @default(now())

  @@index([type])
  @@index([userId])
  @@index([sessionId])
  @@index([visitorId]) // Add this index
  @@index([timestamp])
  @@index([path])
}

model DailyStats {
  id              String   @id @default(cuid())
  date            DateTime @unique
  totalPageviews  Int     @default(0)
  uniqueVisitors  Int     @default(0)
  newUsers        Int     @default(0)
  totalBookmarks  Int     @default(0)
  totalClicks     Int     @default(0)
  activeUsers     Int     @default(0)

  @@index([date])
}
